//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace server.API.Features.Public.GetFamilyScheduleList {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class FamilyScheduleResource {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal FamilyScheduleResource() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("server.API.Features.Public.GetFamilyScheduleList.FamilyScheduleResource", typeof(FamilyScheduleResource).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Schedules in the Biphasic family of sleep schedules typically consist of only two sleep blocks. The main biphasic sleep schedules are Segmented, Siesta and Biphasic-X. Interestingly, they have been the main sleep schedules for a long time throughout human history in some way. Needless to say, they continue to work very well in the modern world..
        /// </summary>
        internal static string Biphasic_Description {
            get {
                return ResourceManager.GetString("Biphasic.Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Polyphasic Society originally proposed the Dual Core (DC) family of sleep schedules based on Segmented sleep.It is typically more difficult to adapt to these schedules than to Everyman schedules. Like with Everyman schedules, the naming of Dual Core schedules is based on how many naps it contains..
        /// </summary>
        internal static string Dual_core_Description {
            get {
                return ResourceManager.GetString("Dual core.Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Everyman sleep is a less extreme alternative to Uberman. Puredoxyk, who named and popularized Uberman, eventually proposed Everyman. It then became E3 to adapt to less sleep more easily while promoting nap flexibility. She reported this as sustainable once her child was a few years old; someone else would watch the child during her naps. .
        /// </summary>
        internal static string Everyman_Description {
            get {
                return ResourceManager.GetString("Everyman.Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Tri Core family of sleep schedules are relatively unusual and not very popular. This is due to hard scheduling of sleep along with wake time activities. The schedules in this group have an SWS-focused core, a REM-focused core, and a mixed core. All these cores only have a single cycle. The number of naps is also very low compared to other schedules (between 0 and 2)..
        /// </summary>
        internal static string Tri_core_Description {
            get {
                return ResourceManager.GetString("Tri core.Description", resourceCulture);
            }
        }
    }
}
