// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using server.Persistence;

#nullable disable

namespace server.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-preview.3.24172.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("NoteSleepPeriod", b =>
                {
                    b.Property<long>("NotesId")
                        .HasColumnType("bigint");

                    b.Property<long>("SleepPeriodsId")
                        .HasColumnType("bigint");

                    b.HasKey("NotesId", "SleepPeriodsId");

                    b.HasIndex("SleepPeriodsId");

                    b.ToTable("NoteSleepPeriod");
                });

            modelBuilder.Entity("server.Domain.BaseSchedule.BaseSchedule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("BaseScheduleFamilyId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ShortName")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<TimeSpan>("TotalSleepTime")
                        .HasColumnType("interval");

                    b.HasKey("Id");

                    b.HasIndex("BaseScheduleFamilyId");

                    b.ToTable("BaseSchedules");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            BaseScheduleFamilyId = 1L,
                            Description = "",
                            Name = "BiphasicX",
                            ShortName = "",
                            TotalSleepTime = new TimeSpan(0, 5, 0, 0, 0)
                        },
                        new
                        {
                            Id = 2L,
                            BaseScheduleFamilyId = 1L,
                            Description = "",
                            Name = "Siesta",
                            ShortName = "",
                            TotalSleepTime = new TimeSpan(0, 5, 0, 0, 0)
                        },
                        new
                        {
                            Id = 3L,
                            BaseScheduleFamilyId = 1L,
                            Description = "",
                            Name = "Siesta Ext",
                            ShortName = "",
                            TotalSleepTime = new TimeSpan(0, 5, 0, 0, 0)
                        },
                        new
                        {
                            Id = 4L,
                            BaseScheduleFamilyId = 3L,
                            Description = "",
                            Name = "Bimaxion",
                            ShortName = "",
                            TotalSleepTime = new TimeSpan(0, 5, 0, 0, 0)
                        },
                        new
                        {
                            Id = 5L,
                            BaseScheduleFamilyId = 2L,
                            Description = "",
                            Name = "Everyman 1",
                            ShortName = "E1",
                            TotalSleepTime = new TimeSpan(0, 5, 0, 0, 0)
                        },
                        new
                        {
                            Id = 6L,
                            BaseScheduleFamilyId = 2L,
                            Description = "",
                            Name = "Everyman 1 Ext",
                            ShortName = "E1-ext",
                            TotalSleepTime = new TimeSpan(0, 5, 0, 0, 0)
                        },
                        new
                        {
                            Id = 7L,
                            BaseScheduleFamilyId = 2L,
                            Description = "",
                            Name = "Everyman 2",
                            ShortName = "E2",
                            TotalSleepTime = new TimeSpan(0, 5, 0, 0, 0)
                        },
                        new
                        {
                            Id = 8L,
                            BaseScheduleFamilyId = 2L,
                            Description = "",
                            Name = "Everyman 3",
                            ShortName = "E3",
                            TotalSleepTime = new TimeSpan(0, 5, 0, 0, 0)
                        },
                        new
                        {
                            Id = 9L,
                            BaseScheduleFamilyId = 2L,
                            Description = "",
                            Name = "Everyman 3 Ext",
                            ShortName = "E3-ext",
                            TotalSleepTime = new TimeSpan(0, 5, 0, 0, 0)
                        },
                        new
                        {
                            Id = 10L,
                            BaseScheduleFamilyId = 2L,
                            Description = "",
                            Name = "Everyman 4",
                            ShortName = "E4",
                            TotalSleepTime = new TimeSpan(0, 5, 0, 0, 0)
                        },
                        new
                        {
                            Id = 11L,
                            BaseScheduleFamilyId = 2L,
                            Description = "",
                            Name = "Everyman 5",
                            ShortName = "E5",
                            TotalSleepTime = new TimeSpan(0, 5, 0, 0, 0)
                        },
                        new
                        {
                            Id = 12L,
                            BaseScheduleFamilyId = 6L,
                            Description = "",
                            Name = "Dymaxion",
                            ShortName = "",
                            TotalSleepTime = new TimeSpan(0, 5, 0, 0, 0)
                        },
                        new
                        {
                            Id = 13L,
                            BaseScheduleFamilyId = 3L,
                            Description = "",
                            Name = "Dual Core 1",
                            ShortName = "DC1",
                            TotalSleepTime = new TimeSpan(0, 5, 0, 0, 0)
                        },
                        new
                        {
                            Id = 14L,
                            BaseScheduleFamilyId = 3L,
                            Description = "",
                            Name = "Dual Core 1 Ext",
                            ShortName = "DC1-ext",
                            TotalSleepTime = new TimeSpan(0, 5, 0, 0, 0)
                        },
                        new
                        {
                            Id = 15L,
                            BaseScheduleFamilyId = 3L,
                            Description = "",
                            Name = "Dual Core 2",
                            ShortName = "DC2",
                            TotalSleepTime = new TimeSpan(0, 5, 0, 0, 0)
                        },
                        new
                        {
                            Id = 16L,
                            BaseScheduleFamilyId = 3L,
                            Description = "",
                            Name = "Dual Core 3",
                            ShortName = "DC3",
                            TotalSleepTime = new TimeSpan(0, 5, 0, 0, 0)
                        },
                        new
                        {
                            Id = 17L,
                            BaseScheduleFamilyId = 3L,
                            Description = "",
                            Name = "Dual Core 4",
                            ShortName = "DC4",
                            TotalSleepTime = new TimeSpan(0, 5, 0, 0, 0)
                        },
                        new
                        {
                            Id = 18L,
                            BaseScheduleFamilyId = 4L,
                            Description = "",
                            Name = "Triphasic",
                            ShortName = "",
                            TotalSleepTime = new TimeSpan(0, 5, 0, 0, 0)
                        },
                        new
                        {
                            Id = 19L,
                            BaseScheduleFamilyId = 4L,
                            Description = "",
                            Name = "Triphasic Ext",
                            ShortName = "",
                            TotalSleepTime = new TimeSpan(0, 5, 0, 0, 0)
                        },
                        new
                        {
                            Id = 20L,
                            BaseScheduleFamilyId = 5L,
                            Description = "",
                            Name = "Segmented",
                            ShortName = "",
                            TotalSleepTime = new TimeSpan(0, 5, 0, 0, 0)
                        },
                        new
                        {
                            Id = 21L,
                            BaseScheduleFamilyId = 5L,
                            Description = "",
                            Name = "Segmented Ext",
                            ShortName = "",
                            TotalSleepTime = new TimeSpan(0, 5, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("server.Domain.BaseSchedule.BaseScheduleFamily", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("BaseScheduleFamilies");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Biphasic"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Everyman"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Dual core"
                        },
                        new
                        {
                            Id = 4L,
                            Name = "Tri core"
                        },
                        new
                        {
                            Id = 5L,
                            Name = "Core-only"
                        },
                        new
                        {
                            Id = 6L,
                            Name = "Nap-only"
                        },
                        new
                        {
                            Id = 7L,
                            Name = "Flexible"
                        },
                        new
                        {
                            Id = 8L,
                            Name = "Non-reducing"
                        });
                });

            modelBuilder.Entity("server.Domain.BaseSchedule.BaseSleepPeriod", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("BaseScheduleId")
                        .HasColumnType("bigint");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time without time zone");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time without time zone");

                    b.HasKey("Id");

                    b.HasIndex("BaseScheduleId");

                    b.ToTable("BaseSleepPeriods");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            BaseScheduleId = 1L,
                            EndTime = new TimeOnly(23, 6, 55),
                            StartTime = new TimeOnly(5, 23, 34)
                        },
                        new
                        {
                            Id = 2L,
                            BaseScheduleId = 1L,
                            EndTime = new TimeOnly(17, 57, 37),
                            StartTime = new TimeOnly(19, 30, 15)
                        },
                        new
                        {
                            Id = 3L,
                            BaseScheduleId = 1L,
                            EndTime = new TimeOnly(14, 11, 26),
                            StartTime = new TimeOnly(11, 3, 4)
                        },
                        new
                        {
                            Id = 4L,
                            BaseScheduleId = 2L,
                            EndTime = new TimeOnly(0, 54, 39),
                            StartTime = new TimeOnly(19, 47, 27)
                        },
                        new
                        {
                            Id = 5L,
                            BaseScheduleId = 2L,
                            EndTime = new TimeOnly(5, 58, 43),
                            StartTime = new TimeOnly(9, 47, 49)
                        },
                        new
                        {
                            Id = 6L,
                            BaseScheduleId = 2L,
                            EndTime = new TimeOnly(0, 10, 54),
                            StartTime = new TimeOnly(23, 5, 40)
                        },
                        new
                        {
                            Id = 7L,
                            BaseScheduleId = 3L,
                            EndTime = new TimeOnly(12, 45, 47),
                            StartTime = new TimeOnly(4, 49, 49)
                        },
                        new
                        {
                            Id = 8L,
                            BaseScheduleId = 3L,
                            EndTime = new TimeOnly(6, 37, 55),
                            StartTime = new TimeOnly(1, 36, 8)
                        },
                        new
                        {
                            Id = 9L,
                            BaseScheduleId = 3L,
                            EndTime = new TimeOnly(13, 33, 29),
                            StartTime = new TimeOnly(22, 16, 43)
                        },
                        new
                        {
                            Id = 10L,
                            BaseScheduleId = 4L,
                            EndTime = new TimeOnly(13, 28, 32),
                            StartTime = new TimeOnly(4, 43, 26)
                        },
                        new
                        {
                            Id = 11L,
                            BaseScheduleId = 4L,
                            EndTime = new TimeOnly(11, 14, 26),
                            StartTime = new TimeOnly(7, 3, 9)
                        },
                        new
                        {
                            Id = 12L,
                            BaseScheduleId = 4L,
                            EndTime = new TimeOnly(14, 29, 22),
                            StartTime = new TimeOnly(23, 19, 36)
                        },
                        new
                        {
                            Id = 13L,
                            BaseScheduleId = 5L,
                            EndTime = new TimeOnly(12, 11, 54),
                            StartTime = new TimeOnly(19, 10, 19)
                        },
                        new
                        {
                            Id = 14L,
                            BaseScheduleId = 5L,
                            EndTime = new TimeOnly(2, 26, 42),
                            StartTime = new TimeOnly(6, 53, 41)
                        },
                        new
                        {
                            Id = 15L,
                            BaseScheduleId = 5L,
                            EndTime = new TimeOnly(7, 29, 12),
                            StartTime = new TimeOnly(7, 42, 45)
                        },
                        new
                        {
                            Id = 16L,
                            BaseScheduleId = 6L,
                            EndTime = new TimeOnly(14, 25, 43),
                            StartTime = new TimeOnly(0, 56, 52)
                        },
                        new
                        {
                            Id = 17L,
                            BaseScheduleId = 6L,
                            EndTime = new TimeOnly(23, 31, 42),
                            StartTime = new TimeOnly(5, 59, 19)
                        },
                        new
                        {
                            Id = 18L,
                            BaseScheduleId = 6L,
                            EndTime = new TimeOnly(20, 46, 56),
                            StartTime = new TimeOnly(1, 47, 42)
                        },
                        new
                        {
                            Id = 19L,
                            BaseScheduleId = 7L,
                            EndTime = new TimeOnly(23, 30, 51),
                            StartTime = new TimeOnly(14, 3, 42)
                        },
                        new
                        {
                            Id = 20L,
                            BaseScheduleId = 7L,
                            EndTime = new TimeOnly(12, 14, 0),
                            StartTime = new TimeOnly(6, 10, 31)
                        },
                        new
                        {
                            Id = 21L,
                            BaseScheduleId = 7L,
                            EndTime = new TimeOnly(4, 26, 44),
                            StartTime = new TimeOnly(4, 7, 43)
                        },
                        new
                        {
                            Id = 22L,
                            BaseScheduleId = 8L,
                            EndTime = new TimeOnly(22, 11, 4),
                            StartTime = new TimeOnly(6, 11, 19)
                        },
                        new
                        {
                            Id = 23L,
                            BaseScheduleId = 8L,
                            EndTime = new TimeOnly(17, 50, 15),
                            StartTime = new TimeOnly(4, 44, 19)
                        },
                        new
                        {
                            Id = 24L,
                            BaseScheduleId = 8L,
                            EndTime = new TimeOnly(3, 21, 24),
                            StartTime = new TimeOnly(19, 41, 42)
                        },
                        new
                        {
                            Id = 25L,
                            BaseScheduleId = 9L,
                            EndTime = new TimeOnly(1, 28, 58),
                            StartTime = new TimeOnly(11, 58, 47)
                        },
                        new
                        {
                            Id = 26L,
                            BaseScheduleId = 9L,
                            EndTime = new TimeOnly(0, 20, 1),
                            StartTime = new TimeOnly(22, 46, 2)
                        },
                        new
                        {
                            Id = 27L,
                            BaseScheduleId = 9L,
                            EndTime = new TimeOnly(2, 56, 30),
                            StartTime = new TimeOnly(22, 30, 16)
                        },
                        new
                        {
                            Id = 28L,
                            BaseScheduleId = 10L,
                            EndTime = new TimeOnly(10, 25, 30),
                            StartTime = new TimeOnly(5, 3, 58)
                        },
                        new
                        {
                            Id = 29L,
                            BaseScheduleId = 10L,
                            EndTime = new TimeOnly(21, 44, 30),
                            StartTime = new TimeOnly(3, 6, 52)
                        },
                        new
                        {
                            Id = 30L,
                            BaseScheduleId = 10L,
                            EndTime = new TimeOnly(15, 57, 25),
                            StartTime = new TimeOnly(21, 5, 12)
                        },
                        new
                        {
                            Id = 31L,
                            BaseScheduleId = 11L,
                            EndTime = new TimeOnly(1, 57, 0),
                            StartTime = new TimeOnly(12, 44, 26)
                        },
                        new
                        {
                            Id = 32L,
                            BaseScheduleId = 11L,
                            EndTime = new TimeOnly(14, 44, 59),
                            StartTime = new TimeOnly(9, 37, 34)
                        },
                        new
                        {
                            Id = 33L,
                            BaseScheduleId = 11L,
                            EndTime = new TimeOnly(11, 55, 42),
                            StartTime = new TimeOnly(13, 30, 54)
                        },
                        new
                        {
                            Id = 34L,
                            BaseScheduleId = 12L,
                            EndTime = new TimeOnly(8, 13, 11),
                            StartTime = new TimeOnly(5, 30, 19)
                        },
                        new
                        {
                            Id = 35L,
                            BaseScheduleId = 12L,
                            EndTime = new TimeOnly(3, 22, 51),
                            StartTime = new TimeOnly(17, 31, 34)
                        },
                        new
                        {
                            Id = 36L,
                            BaseScheduleId = 12L,
                            EndTime = new TimeOnly(17, 16, 31),
                            StartTime = new TimeOnly(7, 16, 7)
                        },
                        new
                        {
                            Id = 37L,
                            BaseScheduleId = 13L,
                            EndTime = new TimeOnly(2, 54, 2),
                            StartTime = new TimeOnly(17, 55, 41)
                        },
                        new
                        {
                            Id = 38L,
                            BaseScheduleId = 13L,
                            EndTime = new TimeOnly(9, 32, 53),
                            StartTime = new TimeOnly(15, 52, 29)
                        },
                        new
                        {
                            Id = 39L,
                            BaseScheduleId = 13L,
                            EndTime = new TimeOnly(16, 38, 24),
                            StartTime = new TimeOnly(23, 18, 4)
                        },
                        new
                        {
                            Id = 40L,
                            BaseScheduleId = 14L,
                            EndTime = new TimeOnly(4, 21, 8),
                            StartTime = new TimeOnly(12, 40, 29)
                        },
                        new
                        {
                            Id = 41L,
                            BaseScheduleId = 14L,
                            EndTime = new TimeOnly(8, 37, 20),
                            StartTime = new TimeOnly(12, 19, 31)
                        },
                        new
                        {
                            Id = 42L,
                            BaseScheduleId = 14L,
                            EndTime = new TimeOnly(9, 4, 13),
                            StartTime = new TimeOnly(4, 48, 49)
                        },
                        new
                        {
                            Id = 43L,
                            BaseScheduleId = 15L,
                            EndTime = new TimeOnly(7, 17, 42),
                            StartTime = new TimeOnly(20, 26, 24)
                        },
                        new
                        {
                            Id = 44L,
                            BaseScheduleId = 15L,
                            EndTime = new TimeOnly(20, 55, 36),
                            StartTime = new TimeOnly(3, 55, 46)
                        },
                        new
                        {
                            Id = 45L,
                            BaseScheduleId = 15L,
                            EndTime = new TimeOnly(20, 32, 54),
                            StartTime = new TimeOnly(17, 20, 7)
                        },
                        new
                        {
                            Id = 46L,
                            BaseScheduleId = 16L,
                            EndTime = new TimeOnly(23, 5, 50),
                            StartTime = new TimeOnly(13, 9, 42)
                        },
                        new
                        {
                            Id = 47L,
                            BaseScheduleId = 16L,
                            EndTime = new TimeOnly(19, 21, 43),
                            StartTime = new TimeOnly(6, 52, 39)
                        },
                        new
                        {
                            Id = 48L,
                            BaseScheduleId = 16L,
                            EndTime = new TimeOnly(23, 19, 51),
                            StartTime = new TimeOnly(2, 24, 9)
                        },
                        new
                        {
                            Id = 49L,
                            BaseScheduleId = 17L,
                            EndTime = new TimeOnly(0, 48, 47),
                            StartTime = new TimeOnly(9, 35, 38)
                        },
                        new
                        {
                            Id = 50L,
                            BaseScheduleId = 17L,
                            EndTime = new TimeOnly(22, 26, 45),
                            StartTime = new TimeOnly(5, 39, 34)
                        },
                        new
                        {
                            Id = 51L,
                            BaseScheduleId = 17L,
                            EndTime = new TimeOnly(19, 5, 57),
                            StartTime = new TimeOnly(18, 19, 55)
                        },
                        new
                        {
                            Id = 52L,
                            BaseScheduleId = 18L,
                            EndTime = new TimeOnly(4, 4, 34),
                            StartTime = new TimeOnly(23, 27, 16)
                        },
                        new
                        {
                            Id = 53L,
                            BaseScheduleId = 18L,
                            EndTime = new TimeOnly(19, 48, 29),
                            StartTime = new TimeOnly(11, 10, 51)
                        },
                        new
                        {
                            Id = 54L,
                            BaseScheduleId = 18L,
                            EndTime = new TimeOnly(1, 27, 8),
                            StartTime = new TimeOnly(4, 42, 39)
                        },
                        new
                        {
                            Id = 55L,
                            BaseScheduleId = 19L,
                            EndTime = new TimeOnly(21, 15, 50),
                            StartTime = new TimeOnly(1, 55, 41)
                        },
                        new
                        {
                            Id = 56L,
                            BaseScheduleId = 19L,
                            EndTime = new TimeOnly(20, 12, 5),
                            StartTime = new TimeOnly(17, 22, 35)
                        },
                        new
                        {
                            Id = 57L,
                            BaseScheduleId = 19L,
                            EndTime = new TimeOnly(9, 11, 32),
                            StartTime = new TimeOnly(22, 14, 39)
                        },
                        new
                        {
                            Id = 58L,
                            BaseScheduleId = 20L,
                            EndTime = new TimeOnly(23, 51, 53),
                            StartTime = new TimeOnly(15, 9, 57)
                        },
                        new
                        {
                            Id = 59L,
                            BaseScheduleId = 20L,
                            EndTime = new TimeOnly(10, 54, 13),
                            StartTime = new TimeOnly(7, 48, 56)
                        },
                        new
                        {
                            Id = 60L,
                            BaseScheduleId = 20L,
                            EndTime = new TimeOnly(9, 20, 21),
                            StartTime = new TimeOnly(19, 16, 37)
                        },
                        new
                        {
                            Id = 61L,
                            BaseScheduleId = 21L,
                            EndTime = new TimeOnly(15, 8, 48),
                            StartTime = new TimeOnly(16, 54, 3)
                        },
                        new
                        {
                            Id = 62L,
                            BaseScheduleId = 21L,
                            EndTime = new TimeOnly(15, 56, 48),
                            StartTime = new TimeOnly(12, 18, 35)
                        },
                        new
                        {
                            Id = 63L,
                            BaseScheduleId = 21L,
                            EndTime = new TimeOnly(10, 18, 19),
                            StartTime = new TimeOnly(6, 2, 43)
                        });
                });

            modelBuilder.Entity("server.Domain.User.JwtLastToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("ExpiryDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("JwtLastTokens");
                });

            modelBuilder.Entity("server.Domain.User.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Bio")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("SignUpDate")
                        .HasColumnType("date");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("server.Domain.UserSchedule.SleepPeriod", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time without time zone");

                    b.Property<long>("UserScheduleAttemptId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("SleepPeriods");
                });

            modelBuilder.Entity("server.Domain.UserSchedule.SleepPeriodHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("SleepPeriodId")
                        .HasColumnType("bigint");

                    b.Property<TimeSpan>("TimeEnd")
                        .HasColumnType("interval");

                    b.Property<TimeSpan>("TimeStart")
                        .HasColumnType("interval");

                    b.HasKey("Id");

                    b.HasIndex("SleepPeriodId");

                    b.ToTable("SleepPeriodChanges");
                });

            modelBuilder.Entity("server.Domain.UserSchedule.UserScheduleAttempt", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("BaseScheduleId")
                        .HasColumnType("bigint");

                    b.Property<DateOnly>("DateFinished")
                        .HasColumnType("date");

                    b.Property<DateOnly>("DateStarted")
                        .HasColumnType("date");

                    b.Property<bool>("IsAdopted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDropped")
                        .HasColumnType("boolean");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BaseScheduleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserScheduleAttempts");
                });

            modelBuilder.Entity("server.Domain.UserScheduleManagement.Capture", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<double>("Value")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Captures");
                });

            modelBuilder.Entity("server.Domain.UserScheduleManagement.FallingAsleepEase", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<long>("SleepPeriodId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SleepPeriodId");

                    b.ToTable("FallingAsleepMarks");
                });

            modelBuilder.Entity("server.Domain.UserScheduleManagement.MissedCheck", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateOnly>("Day")
                        .HasColumnType("date");

                    b.Property<long>("SleepPeriodId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SleepPeriodId");

                    b.ToTable("MissedChecks");
                });

            modelBuilder.Entity("server.Domain.UserScheduleManagement.Note", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("UserScheduleAttemptId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserScheduleAttemptId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("server.Domain.UserScheduleManagement.Oversleep", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<TimeSpan>("Amount")
                        .HasColumnType("interval");

                    b.Property<DateOnly>("Day")
                        .HasColumnType("date");

                    b.Property<long>("SleepPeriodId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SleepPeriodId");

                    b.ToTable("Oversleeps");
                });

            modelBuilder.Entity("server.Domain.UserScheduleManagement.SkippedPeriod", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateOnly>("Day")
                        .HasColumnType("date");

                    b.Property<long>("SleepPeriodId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SleepPeriodId");

                    b.ToTable("SkippedPeriods");
                });

            modelBuilder.Entity("server.Domain.UserScheduleManagement.WakingUpEase", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<long>("SleepPeriodId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SleepPeriodId");

                    b.ToTable("WakingUpMarks");
                });

            modelBuilder.Entity("NoteSleepPeriod", b =>
                {
                    b.HasOne("server.Domain.UserScheduleManagement.Note", null)
                        .WithMany()
                        .HasForeignKey("NotesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Domain.UserSchedule.SleepPeriod", null)
                        .WithMany()
                        .HasForeignKey("SleepPeriodsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("server.Domain.BaseSchedule.BaseSchedule", b =>
                {
                    b.HasOne("server.Domain.BaseSchedule.BaseScheduleFamily", null)
                        .WithMany("BaseSchedules")
                        .HasForeignKey("BaseScheduleFamilyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("server.Domain.BaseSchedule.BaseSleepPeriod", b =>
                {
                    b.HasOne("server.Domain.BaseSchedule.BaseSchedule", null)
                        .WithMany("SleepPeriods")
                        .HasForeignKey("BaseScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("server.Domain.User.JwtLastToken", b =>
                {
                    b.HasOne("server.Domain.User.User", null)
                        .WithOne("JwtLastToken")
                        .HasForeignKey("server.Domain.User.JwtLastToken", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("server.Domain.UserSchedule.SleepPeriodHistory", b =>
                {
                    b.HasOne("server.Domain.UserSchedule.SleepPeriod", "SleepPeriod")
                        .WithMany()
                        .HasForeignKey("SleepPeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SleepPeriod");
                });

            modelBuilder.Entity("server.Domain.UserSchedule.UserScheduleAttempt", b =>
                {
                    b.HasOne("server.Domain.BaseSchedule.BaseSchedule", "BaseSchedule")
                        .WithMany()
                        .HasForeignKey("BaseScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Domain.User.User", null)
                        .WithMany("Attempts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BaseSchedule");
                });

            modelBuilder.Entity("server.Domain.UserScheduleManagement.Capture", b =>
                {
                    b.HasOne("server.Domain.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("server.Domain.UserScheduleManagement.FallingAsleepEase", b =>
                {
                    b.HasOne("server.Domain.UserSchedule.SleepPeriod", "SleepPeriod")
                        .WithMany()
                        .HasForeignKey("SleepPeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SleepPeriod");
                });

            modelBuilder.Entity("server.Domain.UserScheduleManagement.MissedCheck", b =>
                {
                    b.HasOne("server.Domain.UserSchedule.SleepPeriod", "SleepPeriod")
                        .WithMany()
                        .HasForeignKey("SleepPeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SleepPeriod");
                });

            modelBuilder.Entity("server.Domain.UserScheduleManagement.Note", b =>
                {
                    b.HasOne("server.Domain.UserSchedule.UserScheduleAttempt", null)
                        .WithMany("Notes")
                        .HasForeignKey("UserScheduleAttemptId");
                });

            modelBuilder.Entity("server.Domain.UserScheduleManagement.Oversleep", b =>
                {
                    b.HasOne("server.Domain.UserSchedule.SleepPeriod", "SleepPeriod")
                        .WithMany()
                        .HasForeignKey("SleepPeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SleepPeriod");
                });

            modelBuilder.Entity("server.Domain.UserScheduleManagement.SkippedPeriod", b =>
                {
                    b.HasOne("server.Domain.UserSchedule.SleepPeriod", "SleepPeriod")
                        .WithMany()
                        .HasForeignKey("SleepPeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SleepPeriod");
                });

            modelBuilder.Entity("server.Domain.UserScheduleManagement.WakingUpEase", b =>
                {
                    b.HasOne("server.Domain.UserSchedule.SleepPeriod", "SleepPeriod")
                        .WithMany()
                        .HasForeignKey("SleepPeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SleepPeriod");
                });

            modelBuilder.Entity("server.Domain.BaseSchedule.BaseSchedule", b =>
                {
                    b.Navigation("SleepPeriods");
                });

            modelBuilder.Entity("server.Domain.BaseSchedule.BaseScheduleFamily", b =>
                {
                    b.Navigation("BaseSchedules");
                });

            modelBuilder.Entity("server.Domain.User.User", b =>
                {
                    b.Navigation("Attempts");

                    b.Navigation("JwtLastToken")
                        .IsRequired();
                });

            modelBuilder.Entity("server.Domain.UserSchedule.UserScheduleAttempt", b =>
                {
                    b.Navigation("Notes");
                });
#pragma warning restore 612, 618
        }
    }
}
